Two Sum:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] indexes = new int[2];
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++) {
                if(nums[i] + nums[j] == target){
                    indexes[0] = i;
                    indexes[1] = j;
                    
                }
            }
        }
        return indexes;
    }
}

public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement)) {
            return new int[] { map.get(complement), i };
        }
        map.put(nums[i], i);
    }
    throw new IllegalArgumentException("No two sum solution");
}

******************************************************************************************************
Reverse Integer:
class Solution {
    public int reverse(int x) {
        if(x <= Integer.MAX_VALUE && x >= Integer.MIN_VALUE){
            long rev_int = 0;
            while(x != 0){
                rev_int = rev_int*10 + x%10;
                x= x/10;
            }
            if(rev_int <= Integer.MAX_VALUE && rev_int >= Integer.MIN_VALUE){
                return (int) rev_int;
            }
        }
        return 0;
    }
}

class Solution {
    public int reverse(int x) {
        if(x <= Integer.MAX_VALUE && x >= Integer.MIN_VALUE){
            long rev_int = 0;
            while(x != 0){
                rev_int = rev_int*10 + x%10;
                x= x/10;
            }
            if(rev_int <= Integer.MAX_VALUE && rev_int >= Integer.MIN_VALUE){
                return (int) rev_int;
            }
        }
        return 0;
    }
}

*****************************************************************************************************
Integer Palindrome:
public class Solution {
    public bool IsPalindrome(int x) {
        // Special cases:
        // As discussed above, when x < 0, x is not a palindrome.
        // Also if the last digit of the number is 0, in order to be a palindrome,
        // the first digit of the number also needs to be 0.
        // Only 0 satisfy this property.
        if(x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }

        int revertedNumber = 0;
        while(x > revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        }

        // When the length is an odd number, we can get rid of the middle digit by revertedNumber/10
        // For example when the input is 12321, at the end of the while loop we get x = 12, revertedNumber = 123,
        // since the middle digit doesn't matter in palidrome(it will always equal to itself), we can simply get rid of it.
        return x == revertedNumber || x == revertedNumber/10;
    }
}

class Solution {
    public boolean isPalindrome(int x) {
        int temp = x;
        if(temp >= 0 && temp <= Integer.MAX_VALUE){
            long rev = 0;
            while(temp > 0){
                rev = rev*10 + temp%10;
                temp = temp/10;
            }
            return x == (int) rev;
        }
        return false;
    }
}

******************************************************************************************************

Roman numeral to integer:
class Solution {
	static Map<String, Integer> values = new HashMap<>();
    
	static {
		values.put("M", 1000);
		values.put("D", 500);
		values.put("C", 100);
		values.put("L", 50);
		values.put("X", 10);
		values.put("V", 5);
		values.put("I", 1);
	}
	or
    public int romanToInt(String s) {
	
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);
	
        int num = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.length() > 1 && i+1 != s.length()){
                if(map.get(s.charAt(i)) >= map.get(s.charAt(i+1))){
                    num += map.get(s.charAt(i));
                } else {
                    num = num + (map.get(s.charAt(i+1)) - map.get(s.charAt(i)));
                    i++;
                }
            } else {
                num += map.get(s.charAt(i));
            }
        }
        return num;
    }
}
public int romanToInt(String s) {
        
        String lastSymbol = s.substring(s.length() - 1);
        int lastValue = values.get(lastSymbol);
        int total = lastValue;

        for (int i = s.length() - 2; i >= 0; i--) {
            String currentSymbol = s.substring(i, i + 1);
            int currentValue = values.get(currentSymbol);
            if (currentValue < lastValue) {
                total -= currentValue;
            } else {
                total += currentValue;
            }
            lastValue = currentValue;
        }
        return total;
    }
*************************************************************************************************************************
